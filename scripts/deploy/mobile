#!/usr/bin/env node
var requiredVariables = ['PROJECT_PACKAGE', 'PHONEGAP_API_TOKEN', 'PHONEGAP_APP_ID'];
function printUsage () {
  console.error('Please provide the following environment variables:');
  requiredVariables.forEach(function (variable) { console.error('*', variable); });
}
var missingRequiredVariable = requiredVariables.some(function (variable) { return !process.env[variable]; });
if (missingRequiredVariable) { printUsage(); process.exit(1); }

var config = process.env;
config.POLL_INTERVAL = config.POLL_INTERVAL || 2500;

// -----------------------------------------------------------------------------

var domain = require('domain');
var d = domain.create();
d.on('error', function onError (failure) {
  console.error('\nERROR: ' + failure.message);
  process.exit(1);
});

process.stdout.write('Setting PhoneGap Build API token… ');
require('phonegap-build-api').auth({ token: config.PHONEGAP_API_TOKEN }, d.intercept(function upload (api) {
  console.log('DONE!');

  function getKeyId(platform) {
    var keyTitle = (platform === 'ios') ? config.PHONEGAP_IOS_KEY_TITLE : config.PHONEGAP_ANDROID_KEY_TITLE;

    return new Promise(function(resolve, reject) {
      api.get('/keys/' + platform, function(e, data) {
        if (e) return reject(e);

        process.stdout.write("Retrieve key id for " + platform + " platform with title: " + keyTitle + "\n");

        var environmentKey = data.keys.filter(function(key) {
          return key.title === keyTitle
        }).pop();

        var result = {
          platform: platform,
          keyId: environmentKey.id
        };

        resolve(result);
      });
    });
  }

  function authenticateKey (result) {
    var platform = result.platform;
    var keyId = result.keyId;
    var requestBody = {
      'ios': {
        form: {
          data: {
            password: config.IOS_KEY_PASSWORD
          }
        }
      },
      'android': {
        form: {
          data: {
            key_pw: config.ANDROID_KEY_PASSWORD,
            keystore_pw: config.ANDROID_KEY_PASSWORD
          }
        }
      }
    };

    return new Promise(function(resolve, reject) {
      process.stdout.write("Authenticating key for " + platform + "…\n");

      var keyAuthEndpoint = '/keys/' + platform + '/' + keyId;
      api.put(keyAuthEndpoint, requestBody[platform], function status (error, data) {
        if (error) {
          process.stdout.write("Failed authenticating key for " + platform + "…\n");
          return reject(error);
        };

        resolve(data);
      });
    });
  }

  function build () {
    process.stdout.write('Uploading "' + config.PROJECT_PACKAGE + '"… ');
    var options = { form: { file: config.PROJECT_PACKAGE }};
    api.put('/apps/' + config.PHONEGAP_APP_ID, options, d.intercept(function monitor () {
      console.log('DONE!');

      process.stdout.write('Waiting for builds to finish… ');
      var poll = setInterval(function () {
        api.get('/apps/' + config.PHONEGAP_APP_ID, function status (error, data) {
          if (error) { return console.error(error.message); }
          var stillBuilding = Object.keys(data.status).some(function (platform) { return data.status[platform] === 'pending'; });
          if (stillBuilding) { return; }

          console.log('DONE!');
          clearInterval(poll);
          var anyFailure = Object.keys(data.status).some(function (platform) { return !~['complete', 'skip'].indexOf(data.status[platform]); });
          if (anyFailure) { console.error(data.status); process.exit(1); }

          done(data);
        });
      }, config.POLL_INTERVAL);
    }));
  }

  var unlockPlatformKeys = ['ios', 'android'].map(function(platform) {
    return getKeyId(platform).then(authenticateKey);
  });

  Promise.all(unlockPlatformKeys).then(build);
}));

function done (data) {
  require('qrcode-terminal').generate(data.install_url);
  console.log('All set! A few links for you:');
  console.log('* Install: ' + data.install_url);
  console.log('* Share  : ' + data.share_url);
  console.log();
  process.exit();
}
